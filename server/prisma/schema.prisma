// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Category {
  categoryId   String     @id @default(uuid())
  name         String
  description  String?
  products     Products[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Products {
  productId     String      @id @default(uuid())
  sku           String?     @unique // Made optional temporarily
  name          String
  description   String?
  price         Float
  dimensions    String?     // Format: "LxWxH" in cm
  weight        Float?      // in kg
  rating        Float?
  stockQuantity Int
  categoryId    String?
  category      Category?   @relation(fields: [categoryId], references: [categoryId])
  Sales         Sales[]
  Purchases     Purchases[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
}

model Sales {
  saleId      String   @id
  productId   String
  timestamp   DateTime
  quantity    Int
  unitPrice   Float
  totalAmount Float
  product     Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Purchases {
  purchaseId String   @id
  productId  String
  timestamp  DateTime
  quantity   Int
  unitCost   Float
  totalCost  Float
  product    Products @relation(fields: [productId], references: [productId], onDelete: Cascade)
}

model Expenses {
  expenseId String   @id
  category  String
  amount    Float
  timestamp DateTime
}

model SalesSummary {
  salesSummaryId   String   @id
  totalValue       Float
  changePercentage Float?
  date             DateTime
}

model PurchaseSummary {
  purchaseSummaryId String   @id
  totalPurchased    Float
  changePercentage  Float?
  date              DateTime
}

model ExpenseSummary {
  expenseSummaryId  String              @id
  totalExpenses     Float
  date              DateTime
  ExpenseByCategory ExpenseByCategory[]
}

model ExpenseByCategory {
  expenseByCategoryId String         @id
  expenseSummaryId    String
  category            String
  amount              BigInt
  date                DateTime
  expenseSummary      ExpenseSummary @relation(fields: [expenseSummaryId], references: [expenseSummaryId])
}
